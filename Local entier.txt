// Pour le DHT22
#include "DHT.h"
#define DHTPIN 5 
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

//Pour la batterie
const int BATTERYPIN = A1; //pin de la batterie
const int NUM_READINGS = 100;
float batteryReadings[NUM_READINGS]; // tableau pour stocker les lectures analogiques
int readIndex = 0; // index de la lecture actuelle

//Pour les sondes de température

// Include the required Arduino libraries:
#include <OneWire.h>
#include <DallasTemperature.h>

// Define to which pin of the Arduino the 1-Wire buses are connected:
#define ONE_WIRE_BUS_1 1
#define ONE_WIRE_BUS_2 4

// Create new instances of the oneWire class to communicate with any OneWire devices:
OneWire oneWire1(ONE_WIRE_BUS_1);
OneWire oneWire2(ONE_WIRE_BUS_2);

// Pass the oneWire references to DallasTemperature library:
DallasTemperature sensors1(&oneWire1);
DallasTemperature sensors2(&oneWire2);


////////////////Balance

#include <HX711.h>

#define calibration_factor 30620 //This value is obtained using the SparkFun_HX711_Calibration sketch

#define LOADCELL_DOUT_PIN  3
#define LOADCELL_SCK_PIN  2

HX711 scale;

//capteur de lumière

#include "Wire.h"
#define address 0x23                 //I2C Address 0x23

uint8_t buf[4] = {0};
uint16_t data, data1;
float Lux;

///////////// micro
#include <arduinoFFT.h>

const int micPin = A2;
const int sampleSize = 256;
const double samplingFrequency = 10000;

arduinoFFT FFT = arduinoFFT();

double vReal[sampleSize];
double vImag[sampleSize];

const double cutoffFrequency = 50.0;
const double RC = 1.0 / (cutoffFrequency * 2 * 3.1416);
const double dt = 1.0 / samplingFrequency;
const double alpha = RC / (RC + dt);

double lastFilteredValue = 0;


void setup() {
  Serial.begin(9600);
  for (int i = 0; i < NUM_READINGS; i++) {
    batteryReadings[i] = getBattery(); // initialise le tableau avec les valeurs de la batterie actuelle
  }
  dht.begin();
  sensors1.begin();
  sensors2.begin();

  Serial.println("HX711 scale demo");
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
  scale.set_scale(calibration_factor); //This value is obtained by using the SparkFun_HX711_Calibration sketch
  //scale.tare(); //Assuming there is no weight on the scale at start up, reset the scale to 0 //// A enlever éventuellement
  Serial.println("Readings:");

  Wire.begin(); //LUX

}

float getBattery()
{
  float b = analogRead(BATTERYPIN); //valeur analogique

  float V = (b/1023.0)*3.3*2 ; // 3,3=> Vmax d'une pin/ x2=> pont diviseur (facteur 2) /  1023=> résolution de la pin
  float pourtcent = (V-3.3)/0.9;  // 0,9=>  amplitude de fonctionnement de la batterie 3,3 => 4,2
  return pourtcent;
}

float computeMovingAverage() {
  float sum = 0;
  for (int i = 0; i < NUM_READINGS; i++) {
    sum += batteryReadings[i];
  }
  return sum / NUM_READINGS;
}



void loop() {
 float h = dht.readHumidity();
 // Read temperature as Celsius (the default)
 float t = dht.readTemperature();
 // Read temperature as Fahrenheit (isFahrenheit = true)
 float f = dht.readTemperature(true);

 // Check if any reads failed and exit early (to try again).
 //if (isnan(h) || isnan(t) || isnan(f)) {
  // Serial.println(F("Failed to read from DHT sensor!"));
   //return;
 //}



  /*****************************BATTERIE*******************************/
  // Met à jour la valeur actuelle dans le tableau
  batteryReadings[readIndex] = getBattery();
  readIndex = (readIndex + 1) % NUM_READINGS; // avance l'index en boucle

  // Calcule la moyenne glissante
  float movingAverage = computeMovingAverage();
  if (readIndex == 0) { 
  Serial.print("Niveau de batterie: ");  
  Serial.print(movingAverage);
  Serial.println("%");

 Serial.print(F("Humidity: "));
 Serial.print(h);
 Serial.print(F("%  Temperature: "));
 Serial.print(t);
 Serial.println(F("°C Sur DHT22"));


// Send the command for all devices on the bus to perform a temperature conversion:
  sensors1.requestTemperatures();
  sensors2.requestTemperatures();

  // Fetch the temperature in degrees Celsius for each device index:
  float tempC1 = sensors1.getTempCByIndex(0); // the index 0 refers to the first device on the first bus
  float tempC2 = sensors2.getTempCByIndex(0); // the index 0 refers to the first device on the second bus
 // Print the temperatures in Celsius in the Serial Monitor:
  Serial.print("Temperature1: ");
  Serial.print(tempC1);
  Serial.print(" \xC2\xB0"); // shows degree symbol
  Serial.print("C  \t");

  Serial.print("Temperature2: ");
  Serial.print(tempC2);
  Serial.print(" \xC2\xB0"); // shows degree symbol
  Serial.print("C  \n");

  Serial.print("Reading: ");
  Serial.print(scale.get_units()-4.5, 1); //scale.get_units() returns a float
  Serial.print(" kg"); //You can change this to kg but you'll need to refactor the calibration_factor
  Serial.println();

  readReg(0x10, buf, 2);              //Register Address 0x10
  data = buf[0] << 8 | buf[1];
  Lux = (((float)data )/1.2)*1.13-24.43;
  Serial.print("LUX:");
  Serial.print(Lux);
  Serial.print("lx");
  Serial.print("\n");
  //delay(500);

  for (int i = 0; i < sampleSize; i++) {
   vReal[i] = analogRead(micPin);
   vImag[i] = 0;
   delayMicroseconds(1000000 / samplingFrequency);
 }


 FFT.Windowing(vReal, sampleSize, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
 FFT.Compute(vReal, vImag, sampleSize, FFT_FORWARD);
 FFT.ComplexToMagnitude(vReal, vImag, sampleSize);


 double maxAmplitude = 0;
 int maxIndex = 0;
 for (int i = 5; i < (sampleSize / 2); i++) {
   if (vReal[i] > maxAmplitude) {
     maxAmplitude = vReal[i];
     maxIndex = i;
   }
 }


 double maxFrequency = (double)maxIndex * samplingFrequency / sampleSize;


 Serial.print("Highest frequency: ");
 Serial.print(maxFrequency*1.06667/10);
 Serial.print(" Hz with amplitude: ");
 Serial.println(maxAmplitude);

  
  }

  

  delay(10);
 /*********************************FIN BATTERIE*******************************/

}



uint8_t readReg(uint8_t reg, const void* pBuf, size_t size)
{
  if (pBuf == NULL) {
    Serial.println("pBuf ERROR!! : null pointer");
  }
  uint8_t * _pBuf = (uint8_t *)pBuf;
  Wire.beginTransmission(address);
  Wire.write(&reg, 1);
  if ( Wire.endTransmission() != 0) {
    return 0;
  }
  delay(20);
  Wire.requestFrom(address, (uint8_t) size);
  for (uint16_t i = 0; i < size; i++) {
    _pBuf[i] = Wire.read();
  }
  return size;
}

